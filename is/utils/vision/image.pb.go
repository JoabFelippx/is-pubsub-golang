// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.14.0
// source: is/utils/vision/image.proto

package is_vision

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	_ "rabbit_ingo/is/utils/validate"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// List of image formats.
type ImageFormats int32

const (
	ImageFormats_PNG  ImageFormats = 0
	ImageFormats_JPEG ImageFormats = 1
	ImageFormats_WebP ImageFormats = 2
)

// Enum value maps for ImageFormats.
var (
	ImageFormats_name = map[int32]string{
		0: "PNG",
		1: "JPEG",
		2: "WebP",
	}
	ImageFormats_value = map[string]int32{
		"PNG":  0,
		"JPEG": 1,
		"WebP": 2,
	}
)

func (x ImageFormats) Enum() *ImageFormats {
	p := new(ImageFormats)
	*p = x
	return p
}

func (x ImageFormats) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ImageFormats) Descriptor() protoreflect.EnumDescriptor {
	return file_is_utils_vision_image_proto_enumTypes[0].Descriptor()
}

func (ImageFormats) Type() protoreflect.EnumType {
	return &file_is_utils_vision_image_proto_enumTypes[0]
}

func (x ImageFormats) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ImageFormats.Descriptor instead.
func (ImageFormats) EnumDescriptor() ([]byte, []int) {
	return file_is_utils_vision_image_proto_rawDescGZIP(), []int{0}
}

// List of color spaces
type ColorSpaces int32

const (
	// Red, Green, Blue.
	ColorSpaces_RGB ColorSpaces = 0
	// Grayscale.
	ColorSpaces_GRAY ColorSpaces = 1
	// Luma, Blue-Difference, Red-Difference.
	ColorSpaces_YCbCr ColorSpaces = 2
	// Hue, Saturation, Value.
	ColorSpaces_HSV ColorSpaces = 3
)

// Enum value maps for ColorSpaces.
var (
	ColorSpaces_name = map[int32]string{
		0: "RGB",
		1: "GRAY",
		2: "YCbCr",
		3: "HSV",
	}
	ColorSpaces_value = map[string]int32{
		"RGB":   0,
		"GRAY":  1,
		"YCbCr": 2,
		"HSV":   3,
	}
)

func (x ColorSpaces) Enum() *ColorSpaces {
	p := new(ColorSpaces)
	*p = x
	return p
}

func (x ColorSpaces) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ColorSpaces) Descriptor() protoreflect.EnumDescriptor {
	return file_is_utils_vision_image_proto_enumTypes[1].Descriptor()
}

func (ColorSpaces) Type() protoreflect.EnumType {
	return &file_is_utils_vision_image_proto_enumTypes[1]
}

func (x ColorSpaces) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ColorSpaces.Descriptor instead.
func (ColorSpaces) EnumDescriptor() ([]byte, []int) {
	return file_is_utils_vision_image_proto_rawDescGZIP(), []int{1}
}

// Models keypoints present in the human body.
type HumanKeypoints int32

const (
	HumanKeypoints_UNKNOWN_HUMAN_KEYPOINT HumanKeypoints = 0
	HumanKeypoints_HEAD                   HumanKeypoints = 1
	HumanKeypoints_NOSE                   HumanKeypoints = 2
	HumanKeypoints_NECK                   HumanKeypoints = 3
	HumanKeypoints_RIGHT_SHOULDER         HumanKeypoints = 4
	HumanKeypoints_RIGHT_ELBOW            HumanKeypoints = 5
	HumanKeypoints_RIGHT_WRIST            HumanKeypoints = 6
	HumanKeypoints_LEFT_SHOULDER          HumanKeypoints = 7
	HumanKeypoints_LEFT_ELBOW             HumanKeypoints = 8
	HumanKeypoints_LEFT_WRIST             HumanKeypoints = 9
	HumanKeypoints_RIGHT_HIP              HumanKeypoints = 10
	HumanKeypoints_RIGHT_KNEE             HumanKeypoints = 11
	HumanKeypoints_RIGHT_ANKLE            HumanKeypoints = 12
	HumanKeypoints_LEFT_HIP               HumanKeypoints = 13
	HumanKeypoints_LEFT_KNEE              HumanKeypoints = 14
	HumanKeypoints_LEFT_ANKLE             HumanKeypoints = 15
	HumanKeypoints_RIGHT_EYE              HumanKeypoints = 16
	HumanKeypoints_LEFT_EYE               HumanKeypoints = 17
	HumanKeypoints_RIGHT_EAR              HumanKeypoints = 18
	HumanKeypoints_LEFT_EAR               HumanKeypoints = 19
	HumanKeypoints_CHEST                  HumanKeypoints = 20
)

// Enum value maps for HumanKeypoints.
var (
	HumanKeypoints_name = map[int32]string{
		0:  "UNKNOWN_HUMAN_KEYPOINT",
		1:  "HEAD",
		2:  "NOSE",
		3:  "NECK",
		4:  "RIGHT_SHOULDER",
		5:  "RIGHT_ELBOW",
		6:  "RIGHT_WRIST",
		7:  "LEFT_SHOULDER",
		8:  "LEFT_ELBOW",
		9:  "LEFT_WRIST",
		10: "RIGHT_HIP",
		11: "RIGHT_KNEE",
		12: "RIGHT_ANKLE",
		13: "LEFT_HIP",
		14: "LEFT_KNEE",
		15: "LEFT_ANKLE",
		16: "RIGHT_EYE",
		17: "LEFT_EYE",
		18: "RIGHT_EAR",
		19: "LEFT_EAR",
		20: "CHEST",
	}
	HumanKeypoints_value = map[string]int32{
		"UNKNOWN_HUMAN_KEYPOINT": 0,
		"HEAD":                   1,
		"NOSE":                   2,
		"NECK":                   3,
		"RIGHT_SHOULDER":         4,
		"RIGHT_ELBOW":            5,
		"RIGHT_WRIST":            6,
		"LEFT_SHOULDER":          7,
		"LEFT_ELBOW":             8,
		"LEFT_WRIST":             9,
		"RIGHT_HIP":              10,
		"RIGHT_KNEE":             11,
		"RIGHT_ANKLE":            12,
		"LEFT_HIP":               13,
		"LEFT_KNEE":              14,
		"LEFT_ANKLE":             15,
		"RIGHT_EYE":              16,
		"LEFT_EYE":               17,
		"RIGHT_EAR":              18,
		"LEFT_EAR":               19,
		"CHEST":                  20,
	}
)

func (x HumanKeypoints) Enum() *HumanKeypoints {
	p := new(HumanKeypoints)
	*p = x
	return p
}

func (x HumanKeypoints) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HumanKeypoints) Descriptor() protoreflect.EnumDescriptor {
	return file_is_utils_vision_image_proto_enumTypes[2].Descriptor()
}

func (HumanKeypoints) Type() protoreflect.EnumType {
	return &file_is_utils_vision_image_proto_enumTypes[2]
}

func (x HumanKeypoints) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HumanKeypoints.Descriptor instead.
func (HumanKeypoints) EnumDescriptor() ([]byte, []int) {
	return file_is_utils_vision_image_proto_rawDescGZIP(), []int{2}
}

type ObjectLabels int32

const (
	ObjectLabels_UNKNOWN_OBJECT ObjectLabels = 0
	ObjectLabels_HUMAN_SKELETON ObjectLabels = 1
)

// Enum value maps for ObjectLabels.
var (
	ObjectLabels_name = map[int32]string{
		0: "UNKNOWN_OBJECT",
		1: "HUMAN_SKELETON",
	}
	ObjectLabels_value = map[string]int32{
		"UNKNOWN_OBJECT": 0,
		"HUMAN_SKELETON": 1,
	}
)

func (x ObjectLabels) Enum() *ObjectLabels {
	p := new(ObjectLabels)
	*p = x
	return p
}

func (x ObjectLabels) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ObjectLabels) Descriptor() protoreflect.EnumDescriptor {
	return file_is_utils_vision_image_proto_enumTypes[3].Descriptor()
}

func (ObjectLabels) Type() protoreflect.EnumType {
	return &file_is_utils_vision_image_proto_enumTypes[3]
}

func (x ObjectLabels) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ObjectLabels.Descriptor instead.
func (ObjectLabels) EnumDescriptor() ([]byte, []int) {
	return file_is_utils_vision_image_proto_rawDescGZIP(), []int{3}
}

// Message representing an Image. The image content can be either sent embedded on this message
//or referenced as an external resource.
type Image struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Content:
	//	*Image_Data
	//	*Image_Uri
	Content isImage_Content `protobuf_oneof:"content"`
}

func (x *Image) Reset() {
	*x = Image{}
	if protoimpl.UnsafeEnabled {
		mi := &file_is_utils_vision_image_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Image) ProtoMessage() {}

func (x *Image) ProtoReflect() protoreflect.Message {
	mi := &file_is_utils_vision_image_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Image.ProtoReflect.Descriptor instead.
func (*Image) Descriptor() ([]byte, []int) {
	return file_is_utils_vision_image_proto_rawDescGZIP(), []int{0}
}

func (m *Image) GetContent() isImage_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (x *Image) GetData() []byte {
	if x, ok := x.GetContent().(*Image_Data); ok {
		return x.Data
	}
	return nil
}

func (x *Image) GetUri() string {
	if x, ok := x.GetContent().(*Image_Uri); ok {
		return x.Uri
	}
	return ""
}

type isImage_Content interface {
	isImage_Content()
}

type Image_Data struct {
	// Image content, represented as a stream of bytes in well known image
	//[formats](#is.image.ImageFormat).
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3,oneof"`
}

type Image_Uri struct {
	// URI to external image source.
	Uri string `protobuf:"bytes,2,opt,name=uri,proto3,oneof"`
}

func (*Image_Data) isImage_Content() {}

func (*Image_Uri) isImage_Content() {}

//
type ImageFormat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Image compression algorithm.
	Format ImageFormats `protobuf:"varint,1,opt,name=format,proto3,enum=is.vision.ImageFormats" json:"format,omitempty"`
	// Image compression level.
	Compression *wrapperspb.FloatValue `protobuf:"bytes,2,opt,name=compression,proto3" json:"compression,omitempty"`
}

func (x *ImageFormat) Reset() {
	*x = ImageFormat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_is_utils_vision_image_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageFormat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageFormat) ProtoMessage() {}

func (x *ImageFormat) ProtoReflect() protoreflect.Message {
	mi := &file_is_utils_vision_image_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageFormat.ProtoReflect.Descriptor instead.
func (*ImageFormat) Descriptor() ([]byte, []int) {
	return file_is_utils_vision_image_proto_rawDescGZIP(), []int{1}
}

func (x *ImageFormat) GetFormat() ImageFormats {
	if x != nil {
		return x.Format
	}
	return ImageFormats_PNG
}

func (x *ImageFormat) GetCompression() *wrapperspb.FloatValue {
	if x != nil {
		return x.Compression
	}
	return nil
}

// A vertex represents a point in the image (2D: x,y) or in space (3D: x,y,z).
type Vertex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// X coordinate.
	X float32 `protobuf:"fixed32,1,opt,name=x,proto3" json:"x,omitempty"`
	// Y coordinate.
	Y float32 `protobuf:"fixed32,2,opt,name=y,proto3" json:"y,omitempty"`
	// Z coordinate.
	Z float32 `protobuf:"fixed32,3,opt,name=z,proto3" json:"z,omitempty"`
}

func (x *Vertex) Reset() {
	*x = Vertex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_is_utils_vision_image_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vertex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vertex) ProtoMessage() {}

func (x *Vertex) ProtoReflect() protoreflect.Message {
	mi := &file_is_utils_vision_image_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vertex.ProtoReflect.Descriptor instead.
func (*Vertex) Descriptor() ([]byte, []int) {
	return file_is_utils_vision_image_proto_rawDescGZIP(), []int{2}
}

func (x *Vertex) GetX() float32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Vertex) GetY() float32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *Vertex) GetZ() float32 {
	if x != nil {
		return x.Z
	}
	return 0
}

// Sequence of vertices modelling a polygon.
type BoundingPoly struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The polygon vertices.
	Vertices []*Vertex `protobuf:"bytes,1,rep,name=vertices,proto3" json:"vertices,omitempty"`
}

func (x *BoundingPoly) Reset() {
	*x = BoundingPoly{}
	if protoimpl.UnsafeEnabled {
		mi := &file_is_utils_vision_image_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BoundingPoly) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoundingPoly) ProtoMessage() {}

func (x *BoundingPoly) ProtoReflect() protoreflect.Message {
	mi := &file_is_utils_vision_image_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoundingPoly.ProtoReflect.Descriptor instead.
func (*BoundingPoly) Descriptor() ([]byte, []int) {
	return file_is_utils_vision_image_proto_rawDescGZIP(), []int{3}
}

func (x *BoundingPoly) GetVertices() []*Vertex {
	if x != nil {
		return x.Vertices
	}
	return nil
}

// Models the resolution of an image, that is the number of pixels in an image.
type Resolution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of vertical pixels.
	Height uint32 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	// Number of horizontal pixels.
	Width uint32 `protobuf:"varint,2,opt,name=width,proto3" json:"width,omitempty"`
}

func (x *Resolution) Reset() {
	*x = Resolution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_is_utils_vision_image_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Resolution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resolution) ProtoMessage() {}

func (x *Resolution) ProtoReflect() protoreflect.Message {
	mi := &file_is_utils_vision_image_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resolution.ProtoReflect.Descriptor instead.
func (*Resolution) Descriptor() ([]byte, []int) {
	return file_is_utils_vision_image_proto_rawDescGZIP(), []int{4}
}

func (x *Resolution) GetHeight() uint32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *Resolution) GetWidth() uint32 {
	if x != nil {
		return x.Width
	}
	return 0
}

type ColorSpace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Color space value.
	Value ColorSpaces `protobuf:"varint,1,opt,name=value,proto3,enum=is.vision.ColorSpaces" json:"value,omitempty"`
}

func (x *ColorSpace) Reset() {
	*x = ColorSpace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_is_utils_vision_image_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColorSpace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColorSpace) ProtoMessage() {}

func (x *ColorSpace) ProtoReflect() protoreflect.Message {
	mi := &file_is_utils_vision_image_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColorSpace.ProtoReflect.Descriptor instead.
func (*ColorSpace) Descriptor() ([]byte, []int) {
	return file_is_utils_vision_image_proto_rawDescGZIP(), []int{5}
}

func (x *ColorSpace) GetValue() ColorSpaces {
	if x != nil {
		return x.Value
	}
	return ColorSpaces_RGB
}

type ImageSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Image resolution (height, width).
	Resolution *Resolution `protobuf:"bytes,1,opt,name=resolution,proto3" json:"resolution,omitempty"`
	// Image compression details. e.g: PNG.
	Format *ImageFormat `protobuf:"bytes,2,opt,name=format,proto3" json:"format,omitempty"`
	// Color space.
	ColorSpace *ColorSpace `protobuf:"bytes,3,opt,name=color_space,json=colorSpace,proto3" json:"color_space,omitempty"`
	// Bounding poly defining the region of interest in the image.
	//This region is usually represented as a rectangle modelled by
	//the TopLeft and BottomRight vertices.
	Region *BoundingPoly `protobuf:"bytes,4,opt,name=region,proto3" json:"region,omitempty"`
}

func (x *ImageSettings) Reset() {
	*x = ImageSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_is_utils_vision_image_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageSettings) ProtoMessage() {}

func (x *ImageSettings) ProtoReflect() protoreflect.Message {
	mi := &file_is_utils_vision_image_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageSettings.ProtoReflect.Descriptor instead.
func (*ImageSettings) Descriptor() ([]byte, []int) {
	return file_is_utils_vision_image_proto_rawDescGZIP(), []int{6}
}

func (x *ImageSettings) GetResolution() *Resolution {
	if x != nil {
		return x.Resolution
	}
	return nil
}

func (x *ImageSettings) GetFormat() *ImageFormat {
	if x != nil {
		return x.Format
	}
	return nil
}

func (x *ImageSettings) GetColorSpace() *ColorSpace {
	if x != nil {
		return x.ColorSpace
	}
	return nil
}

func (x *ImageSettings) GetRegion() *BoundingPoly {
	if x != nil {
		return x.Region
	}
	return nil
}

// Models an annotation on a point (in an image or in space).
type PointAnnotation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of the keypoint being annotated, usually comes from an enumeration,
	//e.g: [HumanKeypoints](#is.vision.HumanKeypoints).
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Represents how sure the annotator thinks that a keypoint of
	//the specified type exists on the given position.
	Score float32 `protobuf:"fixed32,2,opt,name=score,proto3" json:"score,omitempty"`
	// Position of the keypoint. Represented by (x,y) on images and (x,y,z) on spaces.
	Position *Vertex `protobuf:"bytes,3,opt,name=position,proto3" json:"position,omitempty"`
}

func (x *PointAnnotation) Reset() {
	*x = PointAnnotation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_is_utils_vision_image_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PointAnnotation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PointAnnotation) ProtoMessage() {}

func (x *PointAnnotation) ProtoReflect() protoreflect.Message {
	mi := &file_is_utils_vision_image_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PointAnnotation.ProtoReflect.Descriptor instead.
func (*PointAnnotation) Descriptor() ([]byte, []int) {
	return file_is_utils_vision_image_proto_rawDescGZIP(), []int{7}
}

func (x *PointAnnotation) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PointAnnotation) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *PointAnnotation) GetPosition() *Vertex {
	if x != nil {
		return x.Position
	}
	return nil
}

// Models an annotation on an object (in an image or in space).
type ObjectAnnotation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Label that identifies in human language the object in the annotated
	//region. e.g: human, dog, computer, etc.
	Label string `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	// Number that identifies the object in the annotated region,
	//usually comes from an enumeration.
	Id int64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	// Represents how sure the annotator thinks that an object of
	//the specified type exists on the region.
	Score float32 `protobuf:"fixed32,3,opt,name=score,proto3" json:"score,omitempty"`
	// Identifies the region in the image/space where the object is contained
	//NOTE: When defined on an image the vertex coordinates are in the same scale
	//(resolution) as the original image.
	Region *BoundingPoly `protobuf:"bytes,4,opt,name=region,proto3" json:"region,omitempty"`
	// Annotations of interesting points in the image. e.g: Hip, Nose, Eye.
	//NOTE: When defined on an image the vertex coordinates are in the same scale
	//(resolution) as the original image.
	Keypoints []*PointAnnotation `protobuf:"bytes,5,rep,name=keypoints,proto3" json:"keypoints,omitempty"`
}

func (x *ObjectAnnotation) Reset() {
	*x = ObjectAnnotation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_is_utils_vision_image_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectAnnotation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectAnnotation) ProtoMessage() {}

func (x *ObjectAnnotation) ProtoReflect() protoreflect.Message {
	mi := &file_is_utils_vision_image_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectAnnotation.ProtoReflect.Descriptor instead.
func (*ObjectAnnotation) Descriptor() ([]byte, []int) {
	return file_is_utils_vision_image_proto_rawDescGZIP(), []int{8}
}

func (x *ObjectAnnotation) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *ObjectAnnotation) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ObjectAnnotation) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *ObjectAnnotation) GetRegion() *BoundingPoly {
	if x != nil {
		return x.Region
	}
	return nil
}

func (x *ObjectAnnotation) GetKeypoints() []*PointAnnotation {
	if x != nil {
		return x.Keypoints
	}
	return nil
}

// Models many annotated objects. (List of objects and their respective annotations).
//If resolution is present the annotations are assumed to be on an Image, otherwise
//they are assumed to be in Space and a proper frame_id must be set.
type ObjectAnnotations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of objects and their respective annotations.
	Objects []*ObjectAnnotation `protobuf:"bytes,1,rep,name=objects,proto3" json:"objects,omitempty"`
	// Original resolution of the image when annotation an image.
	Resolution *Resolution `protobuf:"bytes,2,opt,name=resolution,proto3" json:"resolution,omitempty"`
	// Id of the frame of reference used to localize the vertices when annotating objects in space.
	FrameId int64 `protobuf:"varint,3,opt,name=frame_id,json=frameId,proto3" json:"frame_id,omitempty"`
}

func (x *ObjectAnnotations) Reset() {
	*x = ObjectAnnotations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_is_utils_vision_image_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectAnnotations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectAnnotations) ProtoMessage() {}

func (x *ObjectAnnotations) ProtoReflect() protoreflect.Message {
	mi := &file_is_utils_vision_image_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectAnnotations.ProtoReflect.Descriptor instead.
func (*ObjectAnnotations) Descriptor() ([]byte, []int) {
	return file_is_utils_vision_image_proto_rawDescGZIP(), []int{9}
}

func (x *ObjectAnnotations) GetObjects() []*ObjectAnnotation {
	if x != nil {
		return x.Objects
	}
	return nil
}

func (x *ObjectAnnotations) GetResolution() *Resolution {
	if x != nil {
		return x.Resolution
	}
	return nil
}

func (x *ObjectAnnotations) GetFrameId() int64 {
	if x != nil {
		return x.FrameId
	}
	return 0
}

var File_is_utils_vision_image_proto protoreflect.FileDescriptor

var file_is_utils_vision_image_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x69, 0x73, 0x2f, 0x75, 0x74, 0x69, 0x6c, 0x73, 0x2f, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x2f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x69,
	0x73, 0x2e, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x69, 0x73, 0x2f, 0x75, 0x74, 0x69,
	0x6c, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x3c, 0x0a, 0x05, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x03, 0x75, 0x72, 0x69,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x75, 0x72, 0x69, 0x42, 0x09, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x7d, 0x0a, 0x0b, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x2f, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x69, 0x73, 0x2e, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73,
	0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x3d, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x32, 0x0a, 0x06, 0x56, 0x65, 0x72, 0x74, 0x65,
	0x78, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x78, 0x12,
	0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x79, 0x12, 0x0c, 0x0a,
	0x01, 0x7a, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x7a, 0x22, 0x3d, 0x0a, 0x0c, 0x42,
	0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x79, 0x12, 0x2d, 0x0a, 0x08, 0x76,
	0x65, 0x72, 0x74, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x69, 0x73, 0x2e, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x56, 0x65, 0x72, 0x74, 0x65, 0x78,
	0x52, 0x08, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x65, 0x73, 0x22, 0x3a, 0x0a, 0x0a, 0x52, 0x65,
	0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x22, 0x3a, 0x0a, 0x0a, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x69, 0x73, 0x2e, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x53, 0x70, 0x61, 0x63, 0x65, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0xdf, 0x01, 0x0a, 0x0d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x35, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x69, 0x73, 0x2e, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0a, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x06, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69, 0x73,
	0x2e, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x36, 0x0a, 0x0b, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x69, 0x73, 0x2e, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x53, 0x70, 0x61, 0x63, 0x65, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x53, 0x70,
	0x61, 0x63, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x69, 0x73, 0x2e, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x42, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x79, 0x52, 0x06, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x22, 0x79, 0x0a, 0x0f, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x41, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x42, 0x11, 0xba, 0xe9, 0xc0, 0x03, 0x0c, 0x0a, 0x0a, 0x1d,
	0x00, 0x00, 0x80, 0x3f, 0x2d, 0x00, 0x00, 0x00, 0x00, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x12, 0x2d, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x69, 0x73, 0x2e, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x56,
	0x65, 0x72, 0x74, 0x65, 0x78, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0xcc, 0x01, 0x0a, 0x10, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x05, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x42, 0x11, 0xba, 0xe9, 0xc0, 0x03, 0x0c,
	0x0a, 0x0a, 0x1d, 0x00, 0x00, 0x80, 0x3f, 0x2d, 0x00, 0x00, 0x00, 0x00, 0x52, 0x05, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x69, 0x73, 0x2e, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x42, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x79, 0x52, 0x06, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x09, 0x6b, 0x65, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x69, 0x73, 0x2e, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6b, 0x65, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x22, 0x9c,
	0x01, 0x0a, 0x11, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x35, 0x0a, 0x07, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x69, 0x73, 0x2e, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x07, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x35, 0x0a, 0x0a, 0x72,
	0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x69, 0x73, 0x2e, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x6f,
	0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x2a, 0x2b, 0x0a,
	0x0c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x12, 0x07, 0x0a,
	0x03, 0x50, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4a, 0x50, 0x45, 0x47, 0x10, 0x01,
	0x12, 0x08, 0x0a, 0x04, 0x57, 0x65, 0x62, 0x50, 0x10, 0x02, 0x2a, 0x34, 0x0a, 0x0b, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x53, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x47, 0x42,
	0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x47, 0x52, 0x41, 0x59, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05,
	0x59, 0x43, 0x62, 0x43, 0x72, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x48, 0x53, 0x56, 0x10, 0x03,
	0x2a, 0xd5, 0x02, 0x0a, 0x0e, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x4b, 0x65, 0x79, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x16, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x48,
	0x55, 0x4d, 0x41, 0x4e, 0x5f, 0x4b, 0x45, 0x59, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x10, 0x00, 0x12,
	0x08, 0x0a, 0x04, 0x48, 0x45, 0x41, 0x44, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x53,
	0x45, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x45, 0x43, 0x4b, 0x10, 0x03, 0x12, 0x12, 0x0a,
	0x0e, 0x52, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x53, 0x48, 0x4f, 0x55, 0x4c, 0x44, 0x45, 0x52, 0x10,
	0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x45, 0x4c, 0x42, 0x4f, 0x57,
	0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x57, 0x52, 0x49, 0x53,
	0x54, 0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x45, 0x46, 0x54, 0x5f, 0x53, 0x48, 0x4f, 0x55,
	0x4c, 0x44, 0x45, 0x52, 0x10, 0x07, 0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x45, 0x46, 0x54, 0x5f, 0x45,
	0x4c, 0x42, 0x4f, 0x57, 0x10, 0x08, 0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x45, 0x46, 0x54, 0x5f, 0x57,
	0x52, 0x49, 0x53, 0x54, 0x10, 0x09, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x49, 0x47, 0x48, 0x54, 0x5f,
	0x48, 0x49, 0x50, 0x10, 0x0a, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x4b,
	0x4e, 0x45, 0x45, 0x10, 0x0b, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x41,
	0x4e, 0x4b, 0x4c, 0x45, 0x10, 0x0c, 0x12, 0x0c, 0x0a, 0x08, 0x4c, 0x45, 0x46, 0x54, 0x5f, 0x48,
	0x49, 0x50, 0x10, 0x0d, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x45, 0x46, 0x54, 0x5f, 0x4b, 0x4e, 0x45,
	0x45, 0x10, 0x0e, 0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x45, 0x46, 0x54, 0x5f, 0x41, 0x4e, 0x4b, 0x4c,
	0x45, 0x10, 0x0f, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x45, 0x59, 0x45,
	0x10, 0x10, 0x12, 0x0c, 0x0a, 0x08, 0x4c, 0x45, 0x46, 0x54, 0x5f, 0x45, 0x59, 0x45, 0x10, 0x11,
	0x12, 0x0d, 0x0a, 0x09, 0x52, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x45, 0x41, 0x52, 0x10, 0x12, 0x12,
	0x0c, 0x0a, 0x08, 0x4c, 0x45, 0x46, 0x54, 0x5f, 0x45, 0x41, 0x52, 0x10, 0x13, 0x12, 0x09, 0x0a,
	0x05, 0x43, 0x48, 0x45, 0x53, 0x54, 0x10, 0x14, 0x2a, 0x36, 0x0a, 0x0c, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e,
	0x48, 0x55, 0x4d, 0x41, 0x4e, 0x5f, 0x53, 0x4b, 0x45, 0x4c, 0x45, 0x54, 0x4f, 0x4e, 0x10, 0x01,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_is_utils_vision_image_proto_rawDescOnce sync.Once
	file_is_utils_vision_image_proto_rawDescData = file_is_utils_vision_image_proto_rawDesc
)

func file_is_utils_vision_image_proto_rawDescGZIP() []byte {
	file_is_utils_vision_image_proto_rawDescOnce.Do(func() {
		file_is_utils_vision_image_proto_rawDescData = protoimpl.X.CompressGZIP(file_is_utils_vision_image_proto_rawDescData)
	})
	return file_is_utils_vision_image_proto_rawDescData
}

var file_is_utils_vision_image_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_is_utils_vision_image_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_is_utils_vision_image_proto_goTypes = []interface{}{
	(ImageFormats)(0),             // 0: is.vision.ImageFormats
	(ColorSpaces)(0),              // 1: is.vision.ColorSpaces
	(HumanKeypoints)(0),           // 2: is.vision.HumanKeypoints
	(ObjectLabels)(0),             // 3: is.vision.ObjectLabels
	(*Image)(nil),                 // 4: is.vision.Image
	(*ImageFormat)(nil),           // 5: is.vision.ImageFormat
	(*Vertex)(nil),                // 6: is.vision.Vertex
	(*BoundingPoly)(nil),          // 7: is.vision.BoundingPoly
	(*Resolution)(nil),            // 8: is.vision.Resolution
	(*ColorSpace)(nil),            // 9: is.vision.ColorSpace
	(*ImageSettings)(nil),         // 10: is.vision.ImageSettings
	(*PointAnnotation)(nil),       // 11: is.vision.PointAnnotation
	(*ObjectAnnotation)(nil),      // 12: is.vision.ObjectAnnotation
	(*ObjectAnnotations)(nil),     // 13: is.vision.ObjectAnnotations
	(*wrapperspb.FloatValue)(nil), // 14: google.protobuf.FloatValue
}
var file_is_utils_vision_image_proto_depIdxs = []int32{
	0,  // 0: is.vision.ImageFormat.format:type_name -> is.vision.ImageFormats
	14, // 1: is.vision.ImageFormat.compression:type_name -> google.protobuf.FloatValue
	6,  // 2: is.vision.BoundingPoly.vertices:type_name -> is.vision.Vertex
	1,  // 3: is.vision.ColorSpace.value:type_name -> is.vision.ColorSpaces
	8,  // 4: is.vision.ImageSettings.resolution:type_name -> is.vision.Resolution
	5,  // 5: is.vision.ImageSettings.format:type_name -> is.vision.ImageFormat
	9,  // 6: is.vision.ImageSettings.color_space:type_name -> is.vision.ColorSpace
	7,  // 7: is.vision.ImageSettings.region:type_name -> is.vision.BoundingPoly
	6,  // 8: is.vision.PointAnnotation.position:type_name -> is.vision.Vertex
	7,  // 9: is.vision.ObjectAnnotation.region:type_name -> is.vision.BoundingPoly
	11, // 10: is.vision.ObjectAnnotation.keypoints:type_name -> is.vision.PointAnnotation
	12, // 11: is.vision.ObjectAnnotations.objects:type_name -> is.vision.ObjectAnnotation
	8,  // 12: is.vision.ObjectAnnotations.resolution:type_name -> is.vision.Resolution
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_is_utils_vision_image_proto_init() }
func file_is_utils_vision_image_proto_init() {
	if File_is_utils_vision_image_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_is_utils_vision_image_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Image); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_is_utils_vision_image_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageFormat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_is_utils_vision_image_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vertex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_is_utils_vision_image_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BoundingPoly); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_is_utils_vision_image_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Resolution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_is_utils_vision_image_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColorSpace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_is_utils_vision_image_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_is_utils_vision_image_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PointAnnotation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_is_utils_vision_image_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectAnnotation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_is_utils_vision_image_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectAnnotations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_is_utils_vision_image_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Image_Data)(nil),
		(*Image_Uri)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_is_utils_vision_image_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_is_utils_vision_image_proto_goTypes,
		DependencyIndexes: file_is_utils_vision_image_proto_depIdxs,
		EnumInfos:         file_is_utils_vision_image_proto_enumTypes,
		MessageInfos:      file_is_utils_vision_image_proto_msgTypes,
	}.Build()
	File_is_utils_vision_image_proto = out.File
	file_is_utils_vision_image_proto_rawDesc = nil
	file_is_utils_vision_image_proto_goTypes = nil
	file_is_utils_vision_image_proto_depIdxs = nil
}
