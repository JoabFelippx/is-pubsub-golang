// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.14.0
// source: is/utils/vision/camera.proto

package is_vision

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	common "rabbit_ingo/is/utils/common"
	_ "rabbit_ingo/is/utils/validate"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Request selector/filter for CameraSettings. Used to select what fields
//should be present in an CameraConfig GET request.
//See [FieldSelector](#is.common.FieldSelector) for more information.
type CameraConfigFields int32

const (
	// Fill everything.
	CameraConfigFields_ALL CameraConfigFields = 0
	// Fill sampling settings.
	CameraConfigFields_SAMPLING_SETTINGS CameraConfigFields = 1
	// Fill image settings.
	CameraConfigFields_IMAGE_SETTINGS CameraConfigFields = 2
	// Fill camera settings.
	CameraConfigFields_CAMERA_SETTINGS CameraConfigFields = 3
	// Fill stream channel settings
	CameraConfigFields_STREAM_CHANNEL_ID CameraConfigFields = 4
	// Fill camera channel settings
	CameraConfigFields_CHANNEL_ID CameraConfigFields = 5
	// Fill camera control settings
	CameraConfigFields_PTZCONTROL_SETTINGS CameraConfigFields = 6
)

// Enum value maps for CameraConfigFields.
var (
	CameraConfigFields_name = map[int32]string{
		0: "ALL",
		1: "SAMPLING_SETTINGS",
		2: "IMAGE_SETTINGS",
		3: "CAMERA_SETTINGS",
		4: "STREAM_CHANNEL_ID",
		5: "CHANNEL_ID",
		6: "PTZCONTROL_SETTINGS",
	}
	CameraConfigFields_value = map[string]int32{
		"ALL":                 0,
		"SAMPLING_SETTINGS":   1,
		"IMAGE_SETTINGS":      2,
		"CAMERA_SETTINGS":     3,
		"STREAM_CHANNEL_ID":   4,
		"CHANNEL_ID":          5,
		"PTZCONTROL_SETTINGS": 6,
	}
)

func (x CameraConfigFields) Enum() *CameraConfigFields {
	p := new(CameraConfigFields)
	*p = x
	return p
}

func (x CameraConfigFields) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CameraConfigFields) Descriptor() protoreflect.EnumDescriptor {
	return file_is_utils_vision_camera_proto_enumTypes[0].Descriptor()
}

func (CameraConfigFields) Type() protoreflect.EnumType {
	return &file_is_utils_vision_camera_proto_enumTypes[0]
}

func (x CameraConfigFields) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CameraConfigFields.Descriptor instead.
func (CameraConfigFields) EnumDescriptor() ([]byte, []int) {
	return file_is_utils_vision_camera_proto_rawDescGZIP(), []int{0}
}

type CameraSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// True if the camera should automatically assign this parameter.
	Automatic bool `protobuf:"varint,1,opt,name=automatic,proto3" json:"automatic,omitempty"`
	// Ratio assigned to the parameter where 0.0 is the lowest value and 1.0 the highest.
	Ratio float32 `protobuf:"fixed32,2,opt,name=ratio,proto3" json:"ratio,omitempty"`
	// For use when the camera requires a string type parameter.
	Option string `protobuf:"bytes,3,opt,name=option,proto3" json:"option,omitempty"`
}

func (x *CameraSetting) Reset() {
	*x = CameraSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_is_utils_vision_camera_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CameraSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CameraSetting) ProtoMessage() {}

func (x *CameraSetting) ProtoReflect() protoreflect.Message {
	mi := &file_is_utils_vision_camera_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CameraSetting.ProtoReflect.Descriptor instead.
func (*CameraSetting) Descriptor() ([]byte, []int) {
	return file_is_utils_vision_camera_proto_rawDescGZIP(), []int{0}
}

func (x *CameraSetting) GetAutomatic() bool {
	if x != nil {
		return x.Automatic
	}
	return false
}

func (x *CameraSetting) GetRatio() float32 {
	if x != nil {
		return x.Ratio
	}
	return 0
}

func (x *CameraSetting) GetOption() string {
	if x != nil {
		return x.Option
	}
	return ""
}

type CameraSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Brightness     *CameraSetting `protobuf:"bytes,1,opt,name=brightness,proto3" json:"brightness,omitempty"`
	Exposure       *CameraSetting `protobuf:"bytes,2,opt,name=exposure,proto3" json:"exposure,omitempty"`
	Focus          *CameraSetting `protobuf:"bytes,3,opt,name=focus,proto3" json:"focus,omitempty"`
	Gain           *CameraSetting `protobuf:"bytes,4,opt,name=gain,proto3" json:"gain,omitempty"`
	Gamma          *CameraSetting `protobuf:"bytes,5,opt,name=gamma,proto3" json:"gamma,omitempty"`
	Hue            *CameraSetting `protobuf:"bytes,6,opt,name=hue,proto3" json:"hue,omitempty"`
	Iris           *CameraSetting `protobuf:"bytes,7,opt,name=iris,proto3" json:"iris,omitempty"`
	Saturation     *CameraSetting `protobuf:"bytes,8,opt,name=saturation,proto3" json:"saturation,omitempty"`
	Sharpness      *CameraSetting `protobuf:"bytes,9,opt,name=sharpness,proto3" json:"sharpness,omitempty"`
	Shutter        *CameraSetting `protobuf:"bytes,10,opt,name=shutter,proto3" json:"shutter,omitempty"`
	WhiteBalanceBu *CameraSetting `protobuf:"bytes,11,opt,name=white_balance_bu,json=whiteBalanceBu,proto3" json:"white_balance_bu,omitempty"`
	WhiteBalanceRv *CameraSetting `protobuf:"bytes,12,opt,name=white_balance_rv,json=whiteBalanceRv,proto3" json:"white_balance_rv,omitempty"`
	Zoom           *CameraSetting `protobuf:"bytes,13,opt,name=zoom,proto3" json:"zoom,omitempty"`
	Contrast       *CameraSetting `protobuf:"bytes,14,opt,name=contrast,proto3" json:"contrast,omitempty"`
}

func (x *CameraSettings) Reset() {
	*x = CameraSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_is_utils_vision_camera_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CameraSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CameraSettings) ProtoMessage() {}

func (x *CameraSettings) ProtoReflect() protoreflect.Message {
	mi := &file_is_utils_vision_camera_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CameraSettings.ProtoReflect.Descriptor instead.
func (*CameraSettings) Descriptor() ([]byte, []int) {
	return file_is_utils_vision_camera_proto_rawDescGZIP(), []int{1}
}

func (x *CameraSettings) GetBrightness() *CameraSetting {
	if x != nil {
		return x.Brightness
	}
	return nil
}

func (x *CameraSettings) GetExposure() *CameraSetting {
	if x != nil {
		return x.Exposure
	}
	return nil
}

func (x *CameraSettings) GetFocus() *CameraSetting {
	if x != nil {
		return x.Focus
	}
	return nil
}

func (x *CameraSettings) GetGain() *CameraSetting {
	if x != nil {
		return x.Gain
	}
	return nil
}

func (x *CameraSettings) GetGamma() *CameraSetting {
	if x != nil {
		return x.Gamma
	}
	return nil
}

func (x *CameraSettings) GetHue() *CameraSetting {
	if x != nil {
		return x.Hue
	}
	return nil
}

func (x *CameraSettings) GetIris() *CameraSetting {
	if x != nil {
		return x.Iris
	}
	return nil
}

func (x *CameraSettings) GetSaturation() *CameraSetting {
	if x != nil {
		return x.Saturation
	}
	return nil
}

func (x *CameraSettings) GetSharpness() *CameraSetting {
	if x != nil {
		return x.Sharpness
	}
	return nil
}

func (x *CameraSettings) GetShutter() *CameraSetting {
	if x != nil {
		return x.Shutter
	}
	return nil
}

func (x *CameraSettings) GetWhiteBalanceBu() *CameraSetting {
	if x != nil {
		return x.WhiteBalanceBu
	}
	return nil
}

func (x *CameraSettings) GetWhiteBalanceRv() *CameraSetting {
	if x != nil {
		return x.WhiteBalanceRv
	}
	return nil
}

func (x *CameraSettings) GetZoom() *CameraSetting {
	if x != nil {
		return x.Zoom
	}
	return nil
}

func (x *CameraSettings) GetContrast() *CameraSetting {
	if x != nil {
		return x.Contrast
	}
	return nil
}

type PTZControl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Absolute position
	Absolute *common.Position `protobuf:"bytes,1,opt,name=absolute,proto3" json:"absolute,omitempty"`
	// Relative position using steps
	Step *common.Position `protobuf:"bytes,2,opt,name=step,proto3" json:"step,omitempty"`
}

func (x *PTZControl) Reset() {
	*x = PTZControl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_is_utils_vision_camera_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PTZControl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PTZControl) ProtoMessage() {}

func (x *PTZControl) ProtoReflect() protoreflect.Message {
	mi := &file_is_utils_vision_camera_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PTZControl.ProtoReflect.Descriptor instead.
func (*PTZControl) Descriptor() ([]byte, []int) {
	return file_is_utils_vision_camera_proto_rawDescGZIP(), []int{2}
}

func (x *PTZControl) GetAbsolute() *common.Position {
	if x != nil {
		return x.Absolute
	}
	return nil
}

func (x *PTZControl) GetStep() *common.Position {
	if x != nil {
		return x.Step
	}
	return nil
}

// Camera parameters.
type CameraConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Sampling parameters.
	Sampling *common.SamplingSettings `protobuf:"bytes,1,opt,name=sampling,proto3" json:"sampling,omitempty"`
	// Image parameters.
	Image *ImageSettings `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
	// Internal camera parameters.
	Camera *CameraSettings `protobuf:"bytes,3,opt,name=camera,proto3" json:"camera,omitempty"`
	// Stream Channel parameter
	StreamChannelId *wrapperspb.Int32Value `protobuf:"bytes,4,opt,name=stream_channel_id,json=streamChannelId,proto3" json:"stream_channel_id,omitempty"`
	// Channel Parameter
	ChannelId *wrapperspb.Int32Value `protobuf:"bytes,5,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	// Camera PTZ control parameters.
	Ptzcontrol *PTZControl `protobuf:"bytes,6,opt,name=ptzcontrol,proto3" json:"ptzcontrol,omitempty"`
}

func (x *CameraConfig) Reset() {
	*x = CameraConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_is_utils_vision_camera_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CameraConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CameraConfig) ProtoMessage() {}

func (x *CameraConfig) ProtoReflect() protoreflect.Message {
	mi := &file_is_utils_vision_camera_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CameraConfig.ProtoReflect.Descriptor instead.
func (*CameraConfig) Descriptor() ([]byte, []int) {
	return file_is_utils_vision_camera_proto_rawDescGZIP(), []int{3}
}

func (x *CameraConfig) GetSampling() *common.SamplingSettings {
	if x != nil {
		return x.Sampling
	}
	return nil
}

func (x *CameraConfig) GetImage() *ImageSettings {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *CameraConfig) GetCamera() *CameraSettings {
	if x != nil {
		return x.Camera
	}
	return nil
}

func (x *CameraConfig) GetStreamChannelId() *wrapperspb.Int32Value {
	if x != nil {
		return x.StreamChannelId
	}
	return nil
}

func (x *CameraConfig) GetChannelId() *wrapperspb.Int32Value {
	if x != nil {
		return x.ChannelId
	}
	return nil
}

func (x *CameraConfig) GetPtzcontrol() *PTZControl {
	if x != nil {
		return x.Ptzcontrol
	}
	return nil
}

// Models the calibration parameters of a camera.
type CameraCalibration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Camera id.
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// When the calibration was performed.
	CalibratedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=calibrated_at,json=calibratedAt,proto3" json:"calibrated_at,omitempty"`
	// Average reprojection error.
	Error float64 `protobuf:"fixed64,3,opt,name=error,proto3" json:"error,omitempty"`
	// Resolution used during calibration.
	Resolution *Resolution `protobuf:"bytes,4,opt,name=resolution,proto3" json:"resolution,omitempty"`
	// Intrinsic matrix with shape=[3,3].
	Intrinsic *common.Tensor `protobuf:"bytes,5,opt,name=intrinsic,proto3" json:"intrinsic,omitempty"`
	// Distortion coefficients with shape=[1,5].
	Distortion *common.Tensor `protobuf:"bytes,6,opt,name=distortion,proto3" json:"distortion,omitempty"`
	// Extrinsic tranformations. Used to transform from the camera frame to a world frame
	//and vice versa.
	Extrinsic []*FrameTransformation `protobuf:"bytes,7,rep,name=extrinsic,proto3" json:"extrinsic,omitempty"`
}

func (x *CameraCalibration) Reset() {
	*x = CameraCalibration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_is_utils_vision_camera_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CameraCalibration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CameraCalibration) ProtoMessage() {}

func (x *CameraCalibration) ProtoReflect() protoreflect.Message {
	mi := &file_is_utils_vision_camera_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CameraCalibration.ProtoReflect.Descriptor instead.
func (*CameraCalibration) Descriptor() ([]byte, []int) {
	return file_is_utils_vision_camera_proto_rawDescGZIP(), []int{4}
}

func (x *CameraCalibration) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CameraCalibration) GetCalibratedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CalibratedAt
	}
	return nil
}

func (x *CameraCalibration) GetError() float64 {
	if x != nil {
		return x.Error
	}
	return 0
}

func (x *CameraCalibration) GetResolution() *Resolution {
	if x != nil {
		return x.Resolution
	}
	return nil
}

func (x *CameraCalibration) GetIntrinsic() *common.Tensor {
	if x != nil {
		return x.Intrinsic
	}
	return nil
}

func (x *CameraCalibration) GetDistortion() *common.Tensor {
	if x != nil {
		return x.Distortion
	}
	return nil
}

func (x *CameraCalibration) GetExtrinsic() []*FrameTransformation {
	if x != nil {
		return x.Extrinsic
	}
	return nil
}

// Represent the tranformation between two coordinate systems.
type FrameTransformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of the "from" frame.
	From int64 `protobuf:"varint,1,opt,name=from,proto3" json:"from,omitempty"`
	// Id of the "to" frame.
	To int64 `protobuf:"varint,2,opt,name=to,proto3" json:"to,omitempty"`
	// Transformation matrix [R T; 0 1] with shape = [4,4].
	Tf *common.Tensor `protobuf:"bytes,3,opt,name=tf,proto3" json:"tf,omitempty"`
	// Timepoint where this transformation is still valid. If not present the transformation will be
	//considered to be valid forever.
	Expiration *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=expiration,proto3" json:"expiration,omitempty"`
}

func (x *FrameTransformation) Reset() {
	*x = FrameTransformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_is_utils_vision_camera_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FrameTransformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrameTransformation) ProtoMessage() {}

func (x *FrameTransformation) ProtoReflect() protoreflect.Message {
	mi := &file_is_utils_vision_camera_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrameTransformation.ProtoReflect.Descriptor instead.
func (*FrameTransformation) Descriptor() ([]byte, []int) {
	return file_is_utils_vision_camera_proto_rawDescGZIP(), []int{5}
}

func (x *FrameTransformation) GetFrom() int64 {
	if x != nil {
		return x.From
	}
	return 0
}

func (x *FrameTransformation) GetTo() int64 {
	if x != nil {
		return x.To
	}
	return 0
}

func (x *FrameTransformation) GetTf() *common.Tensor {
	if x != nil {
		return x.Tf
	}
	return nil
}

func (x *FrameTransformation) GetExpiration() *timestamppb.Timestamp {
	if x != nil {
		return x.Expiration
	}
	return nil
}

type FrameTransformations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of transformations.
	Tfs []*FrameTransformation `protobuf:"bytes,1,rep,name=tfs,proto3" json:"tfs,omitempty"`
}

func (x *FrameTransformations) Reset() {
	*x = FrameTransformations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_is_utils_vision_camera_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FrameTransformations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrameTransformations) ProtoMessage() {}

func (x *FrameTransformations) ProtoReflect() protoreflect.Message {
	mi := &file_is_utils_vision_camera_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrameTransformations.ProtoReflect.Descriptor instead.
func (*FrameTransformations) Descriptor() ([]byte, []int) {
	return file_is_utils_vision_camera_proto_rawDescGZIP(), []int{6}
}

func (x *FrameTransformations) GetTfs() []*FrameTransformation {
	if x != nil {
		return x.Tfs
	}
	return nil
}

type IdPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From int64 `protobuf:"varint,1,opt,name=from,proto3" json:"from,omitempty"`
	To   int64 `protobuf:"varint,2,opt,name=to,proto3" json:"to,omitempty"`
}

func (x *IdPair) Reset() {
	*x = IdPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_is_utils_vision_camera_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdPair) ProtoMessage() {}

func (x *IdPair) ProtoReflect() protoreflect.Message {
	mi := &file_is_utils_vision_camera_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdPair.ProtoReflect.Descriptor instead.
func (*IdPair) Descriptor() ([]byte, []int) {
	return file_is_utils_vision_camera_proto_rawDescGZIP(), []int{7}
}

func (x *IdPair) GetFrom() int64 {
	if x != nil {
		return x.From
	}
	return 0
}

func (x *IdPair) GetTo() int64 {
	if x != nil {
		return x.To
	}
	return 0
}

type GetTransformationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Sequence of pairs (from -> to) describing the desired transformations
	Ids []*IdPair `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *GetTransformationRequest) Reset() {
	*x = GetTransformationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_is_utils_vision_camera_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTransformationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransformationRequest) ProtoMessage() {}

func (x *GetTransformationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_is_utils_vision_camera_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransformationRequest.ProtoReflect.Descriptor instead.
func (*GetTransformationRequest) Descriptor() ([]byte, []int) {
	return file_is_utils_vision_camera_proto_rawDescGZIP(), []int{8}
}

func (x *GetTransformationRequest) GetIds() []*IdPair {
	if x != nil {
		return x.Ids
	}
	return nil
}

type GetTransformationReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Sequence of transformations relative to the requested ids.
	Transformations []*FrameTransformation `protobuf:"bytes,1,rep,name=transformations,proto3" json:"transformations,omitempty"`
}

func (x *GetTransformationReply) Reset() {
	*x = GetTransformationReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_is_utils_vision_camera_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTransformationReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransformationReply) ProtoMessage() {}

func (x *GetTransformationReply) ProtoReflect() protoreflect.Message {
	mi := &file_is_utils_vision_camera_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransformationReply.ProtoReflect.Descriptor instead.
func (*GetTransformationReply) Descriptor() ([]byte, []int) {
	return file_is_utils_vision_camera_proto_rawDescGZIP(), []int{9}
}

func (x *GetTransformationReply) GetTransformations() []*FrameTransformation {
	if x != nil {
		return x.Transformations
	}
	return nil
}

type AddTransformationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddTransformationRequest) Reset() {
	*x = AddTransformationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_is_utils_vision_camera_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddTransformationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTransformationRequest) ProtoMessage() {}

func (x *AddTransformationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_is_utils_vision_camera_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTransformationRequest.ProtoReflect.Descriptor instead.
func (*AddTransformationRequest) Descriptor() ([]byte, []int) {
	return file_is_utils_vision_camera_proto_rawDescGZIP(), []int{10}
}

type AddTransformationReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddTransformationReply) Reset() {
	*x = AddTransformationReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_is_utils_vision_camera_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddTransformationReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTransformationReply) ProtoMessage() {}

func (x *AddTransformationReply) ProtoReflect() protoreflect.Message {
	mi := &file_is_utils_vision_camera_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTransformationReply.ProtoReflect.Descriptor instead.
func (*AddTransformationReply) Descriptor() ([]byte, []int) {
	return file_is_utils_vision_camera_proto_rawDescGZIP(), []int{11}
}

type GetCalibrationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IDs of the cameras to return the calibration from.
	Ids []int64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *GetCalibrationRequest) Reset() {
	*x = GetCalibrationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_is_utils_vision_camera_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCalibrationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCalibrationRequest) ProtoMessage() {}

func (x *GetCalibrationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_is_utils_vision_camera_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCalibrationRequest.ProtoReflect.Descriptor instead.
func (*GetCalibrationRequest) Descriptor() ([]byte, []int) {
	return file_is_utils_vision_camera_proto_rawDescGZIP(), []int{12}
}

func (x *GetCalibrationRequest) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type GetCalibrationReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Sequence of calibrations relative to the requested IDs.
	Calibrations []*CameraCalibration `protobuf:"bytes,1,rep,name=calibrations,proto3" json:"calibrations,omitempty"`
}

func (x *GetCalibrationReply) Reset() {
	*x = GetCalibrationReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_is_utils_vision_camera_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCalibrationReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCalibrationReply) ProtoMessage() {}

func (x *GetCalibrationReply) ProtoReflect() protoreflect.Message {
	mi := &file_is_utils_vision_camera_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCalibrationReply.ProtoReflect.Descriptor instead.
func (*GetCalibrationReply) Descriptor() ([]byte, []int) {
	return file_is_utils_vision_camera_proto_rawDescGZIP(), []int{13}
}

func (x *GetCalibrationReply) GetCalibrations() []*CameraCalibration {
	if x != nil {
		return x.Calibrations
	}
	return nil
}

var File_is_utils_vision_camera_proto protoreflect.FileDescriptor

var file_is_utils_vision_camera_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x69, 0x73, 0x2f, 0x75, 0x74, 0x69, 0x6c, 0x73, 0x2f, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x2f, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09,
	0x69, 0x73, 0x2e, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x1c, 0x69, 0x73, 0x2f, 0x75, 0x74,
	0x69, 0x6c, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x69, 0x73, 0x2f, 0x75, 0x74, 0x69, 0x6c,
	0x73, 0x2f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x69, 0x73, 0x2f, 0x75, 0x74, 0x69, 0x6c, 0x73, 0x2f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x6e, 0x0a, 0x0d, 0x43, 0x61, 0x6d, 0x65, 0x72,
	0x61, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x12, 0x27, 0x0a, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x02, 0x42, 0x11, 0xba, 0xe9, 0xc0, 0x03, 0x0c, 0x0a, 0x0a, 0x1d, 0x00,
	0x00, 0x80, 0x3f, 0x2d, 0x00, 0x00, 0x00, 0x00, 0x52, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xfa, 0x05, 0x0a, 0x0e, 0x43, 0x61, 0x6d, 0x65,
	0x72, 0x61, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x38, 0x0a, 0x0a, 0x62, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x69, 0x73, 0x2e, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x61, 0x6d, 0x65, 0x72,
	0x61, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x6e, 0x65, 0x73, 0x73, 0x12, 0x34, 0x0a, 0x08, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x69, 0x73, 0x2e, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x52, 0x08, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x66, 0x6f,
	0x63, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x69, 0x73, 0x2e, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x52, 0x05, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x12, 0x2c, 0x0a, 0x04, 0x67, 0x61,
	0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x69, 0x73, 0x2e, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x52, 0x04, 0x67, 0x61, 0x69, 0x6e, 0x12, 0x2e, 0x0a, 0x05, 0x67, 0x61, 0x6d, 0x6d,
	0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x69, 0x73, 0x2e, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x52, 0x05, 0x67, 0x61, 0x6d, 0x6d, 0x61, 0x12, 0x2a, 0x0a, 0x03, 0x68, 0x75, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x69, 0x73, 0x2e, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x2e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52,
	0x03, 0x68, 0x75, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x69, 0x72, 0x69, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x69, 0x73, 0x2e, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x43,
	0x61, 0x6d, 0x65, 0x72, 0x61, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x69, 0x72,
	0x69, 0x73, 0x12, 0x38, 0x0a, 0x0a, 0x73, 0x61, 0x74, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x69, 0x73, 0x2e, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x52, 0x0a, 0x73, 0x61, 0x74, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x09,
	0x73, 0x68, 0x61, 0x72, 0x70, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x69, 0x73, 0x2e, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x61, 0x6d, 0x65,
	0x72, 0x61, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x73, 0x68, 0x61, 0x72, 0x70,
	0x6e, 0x65, 0x73, 0x73, 0x12, 0x32, 0x0a, 0x07, 0x73, 0x68, 0x75, 0x74, 0x74, 0x65, 0x72, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x69, 0x73, 0x2e, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x2e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52,
	0x07, 0x73, 0x68, 0x75, 0x74, 0x74, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x10, 0x77, 0x68, 0x69, 0x74,
	0x65, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x62, 0x75, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x69, 0x73, 0x2e, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x43,
	0x61, 0x6d, 0x65, 0x72, 0x61, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0e, 0x77, 0x68,
	0x69, 0x74, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x75, 0x12, 0x42, 0x0a, 0x10,
	0x77, 0x68, 0x69, 0x74, 0x65, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x76,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x69, 0x73, 0x2e, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x52, 0x0e, 0x77, 0x68, 0x69, 0x74, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x76,
	0x12, 0x2c, 0x0a, 0x04, 0x7a, 0x6f, 0x6f, 0x6d, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x69, 0x73, 0x2e, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x61, 0x6d, 0x65, 0x72,
	0x61, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x7a, 0x6f, 0x6f, 0x6d, 0x12, 0x34,
	0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x69, 0x73, 0x2e, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x61, 0x6d,
	0x65, 0x72, 0x61, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x73, 0x74, 0x22, 0x66, 0x0a, 0x0a, 0x50, 0x54, 0x5a, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x12, 0x2f, 0x0a, 0x08, 0x61, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x61, 0x62, 0x73, 0x6f, 0x6c,
	0x75, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x22, 0xe6, 0x02, 0x0a,
	0x0c, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x37, 0x0a,
	0x08, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x61, 0x6d, 0x70,
	0x6c, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x08, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x2e, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x69, 0x73, 0x2e, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52,
	0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x69, 0x73, 0x2e, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x52, 0x06, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x12, 0x47, 0x0a, 0x11, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x64, 0x12, 0x3a, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x35,
	0x0a, 0x0a, 0x70, 0x74, 0x7a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x69, 0x73, 0x2e, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x50,
	0x54, 0x5a, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x0a, 0x70, 0x74, 0x7a, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x22, 0xd3, 0x02, 0x0a, 0x11, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61,
	0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x0d, 0x63,
	0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c,
	0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x35, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x69, 0x73, 0x2e, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x72,
	0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x09, 0x69, 0x6e, 0x74,
	0x72, 0x69, 0x6e, 0x73, 0x69, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x69,
	0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x52,
	0x09, 0x69, 0x6e, 0x74, 0x72, 0x69, 0x6e, 0x73, 0x69, 0x63, 0x12, 0x31, 0x0a, 0x0a, 0x64, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x72, 0x69, 0x6e, 0x73, 0x69, 0x63, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x69, 0x73, 0x2e, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x72, 0x69, 0x6e, 0x73, 0x69, 0x63, 0x22, 0x98, 0x01, 0x0a, 0x13,
	0x46, 0x72, 0x61, 0x6d, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x21, 0x0a, 0x02, 0x74, 0x66, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x52, 0x02, 0x74, 0x66, 0x12, 0x3a, 0x0a, 0x0a, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x48, 0x0a, 0x14, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x30,
	0x0a, 0x03, 0x74, 0x66, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x69, 0x73,
	0x2e, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x74, 0x66, 0x73,
	0x22, 0x2c, 0x0a, 0x06, 0x49, 0x64, 0x50, 0x61, 0x69, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72,
	0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e,
	0x0a, 0x02, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x74, 0x6f, 0x22, 0x3f,
	0x0a, 0x18, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x03, 0x69, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x69, 0x73, 0x2e, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x50, 0x61, 0x69, 0x72, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22,
	0x62, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x48, 0x0a, 0x0f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x69, 0x73, 0x2e, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0x1a, 0x0a, 0x18, 0x41, 0x64, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x18, 0x0a, 0x16, 0x41, 0x64, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x29, 0x0a, 0x15, 0x47, 0x65, 0x74,
	0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x03, 0x69, 0x64, 0x73, 0x22, 0x57, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x61, 0x6c, 0x69, 0x62,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x40, 0x0a, 0x0c, 0x63,
	0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x69, 0x73, 0x2e, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x61,
	0x6d, 0x65, 0x72, 0x61, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0c, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2a, 0x9d, 0x01,
	0x0a, 0x12, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x15, 0x0a,
	0x11, 0x53, 0x41, 0x4d, 0x50, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e,
	0x47, 0x53, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x45,
	0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x41, 0x4d, 0x45,
	0x52, 0x41, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x10, 0x03, 0x12, 0x15, 0x0a,
	0x11, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f,
	0x49, 0x44, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f,
	0x49, 0x44, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x54, 0x5a, 0x43, 0x4f, 0x4e, 0x54, 0x52,
	0x4f, 0x4c, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x10, 0x06, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_is_utils_vision_camera_proto_rawDescOnce sync.Once
	file_is_utils_vision_camera_proto_rawDescData = file_is_utils_vision_camera_proto_rawDesc
)

func file_is_utils_vision_camera_proto_rawDescGZIP() []byte {
	file_is_utils_vision_camera_proto_rawDescOnce.Do(func() {
		file_is_utils_vision_camera_proto_rawDescData = protoimpl.X.CompressGZIP(file_is_utils_vision_camera_proto_rawDescData)
	})
	return file_is_utils_vision_camera_proto_rawDescData
}

var file_is_utils_vision_camera_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_is_utils_vision_camera_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_is_utils_vision_camera_proto_goTypes = []interface{}{
	(CameraConfigFields)(0),          // 0: is.vision.CameraConfigFields
	(*CameraSetting)(nil),            // 1: is.vision.CameraSetting
	(*CameraSettings)(nil),           // 2: is.vision.CameraSettings
	(*PTZControl)(nil),               // 3: is.vision.PTZControl
	(*CameraConfig)(nil),             // 4: is.vision.CameraConfig
	(*CameraCalibration)(nil),        // 5: is.vision.CameraCalibration
	(*FrameTransformation)(nil),      // 6: is.vision.FrameTransformation
	(*FrameTransformations)(nil),     // 7: is.vision.FrameTransformations
	(*IdPair)(nil),                   // 8: is.vision.IdPair
	(*GetTransformationRequest)(nil), // 9: is.vision.GetTransformationRequest
	(*GetTransformationReply)(nil),   // 10: is.vision.GetTransformationReply
	(*AddTransformationRequest)(nil), // 11: is.vision.AddTransformationRequest
	(*AddTransformationReply)(nil),   // 12: is.vision.AddTransformationReply
	(*GetCalibrationRequest)(nil),    // 13: is.vision.GetCalibrationRequest
	(*GetCalibrationReply)(nil),      // 14: is.vision.GetCalibrationReply
	(*common.Position)(nil),          // 15: is.common.Position
	(*common.SamplingSettings)(nil),  // 16: is.common.SamplingSettings
	(*ImageSettings)(nil),            // 17: is.vision.ImageSettings
	(*wrapperspb.Int32Value)(nil),    // 18: google.protobuf.Int32Value
	(*timestamppb.Timestamp)(nil),    // 19: google.protobuf.Timestamp
	(*Resolution)(nil),               // 20: is.vision.Resolution
	(*common.Tensor)(nil),            // 21: is.common.Tensor
}
var file_is_utils_vision_camera_proto_depIdxs = []int32{
	1,  // 0: is.vision.CameraSettings.brightness:type_name -> is.vision.CameraSetting
	1,  // 1: is.vision.CameraSettings.exposure:type_name -> is.vision.CameraSetting
	1,  // 2: is.vision.CameraSettings.focus:type_name -> is.vision.CameraSetting
	1,  // 3: is.vision.CameraSettings.gain:type_name -> is.vision.CameraSetting
	1,  // 4: is.vision.CameraSettings.gamma:type_name -> is.vision.CameraSetting
	1,  // 5: is.vision.CameraSettings.hue:type_name -> is.vision.CameraSetting
	1,  // 6: is.vision.CameraSettings.iris:type_name -> is.vision.CameraSetting
	1,  // 7: is.vision.CameraSettings.saturation:type_name -> is.vision.CameraSetting
	1,  // 8: is.vision.CameraSettings.sharpness:type_name -> is.vision.CameraSetting
	1,  // 9: is.vision.CameraSettings.shutter:type_name -> is.vision.CameraSetting
	1,  // 10: is.vision.CameraSettings.white_balance_bu:type_name -> is.vision.CameraSetting
	1,  // 11: is.vision.CameraSettings.white_balance_rv:type_name -> is.vision.CameraSetting
	1,  // 12: is.vision.CameraSettings.zoom:type_name -> is.vision.CameraSetting
	1,  // 13: is.vision.CameraSettings.contrast:type_name -> is.vision.CameraSetting
	15, // 14: is.vision.PTZControl.absolute:type_name -> is.common.Position
	15, // 15: is.vision.PTZControl.step:type_name -> is.common.Position
	16, // 16: is.vision.CameraConfig.sampling:type_name -> is.common.SamplingSettings
	17, // 17: is.vision.CameraConfig.image:type_name -> is.vision.ImageSettings
	2,  // 18: is.vision.CameraConfig.camera:type_name -> is.vision.CameraSettings
	18, // 19: is.vision.CameraConfig.stream_channel_id:type_name -> google.protobuf.Int32Value
	18, // 20: is.vision.CameraConfig.channel_id:type_name -> google.protobuf.Int32Value
	3,  // 21: is.vision.CameraConfig.ptzcontrol:type_name -> is.vision.PTZControl
	19, // 22: is.vision.CameraCalibration.calibrated_at:type_name -> google.protobuf.Timestamp
	20, // 23: is.vision.CameraCalibration.resolution:type_name -> is.vision.Resolution
	21, // 24: is.vision.CameraCalibration.intrinsic:type_name -> is.common.Tensor
	21, // 25: is.vision.CameraCalibration.distortion:type_name -> is.common.Tensor
	6,  // 26: is.vision.CameraCalibration.extrinsic:type_name -> is.vision.FrameTransformation
	21, // 27: is.vision.FrameTransformation.tf:type_name -> is.common.Tensor
	19, // 28: is.vision.FrameTransformation.expiration:type_name -> google.protobuf.Timestamp
	6,  // 29: is.vision.FrameTransformations.tfs:type_name -> is.vision.FrameTransformation
	8,  // 30: is.vision.GetTransformationRequest.ids:type_name -> is.vision.IdPair
	6,  // 31: is.vision.GetTransformationReply.transformations:type_name -> is.vision.FrameTransformation
	5,  // 32: is.vision.GetCalibrationReply.calibrations:type_name -> is.vision.CameraCalibration
	33, // [33:33] is the sub-list for method output_type
	33, // [33:33] is the sub-list for method input_type
	33, // [33:33] is the sub-list for extension type_name
	33, // [33:33] is the sub-list for extension extendee
	0,  // [0:33] is the sub-list for field type_name
}

func init() { file_is_utils_vision_camera_proto_init() }
func file_is_utils_vision_camera_proto_init() {
	if File_is_utils_vision_camera_proto != nil {
		return
	}
	file_is_utils_vision_image_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_is_utils_vision_camera_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CameraSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_is_utils_vision_camera_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CameraSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_is_utils_vision_camera_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PTZControl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_is_utils_vision_camera_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CameraConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_is_utils_vision_camera_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CameraCalibration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_is_utils_vision_camera_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FrameTransformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_is_utils_vision_camera_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FrameTransformations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_is_utils_vision_camera_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_is_utils_vision_camera_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTransformationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_is_utils_vision_camera_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTransformationReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_is_utils_vision_camera_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddTransformationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_is_utils_vision_camera_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddTransformationReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_is_utils_vision_camera_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCalibrationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_is_utils_vision_camera_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCalibrationReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_is_utils_vision_camera_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_is_utils_vision_camera_proto_goTypes,
		DependencyIndexes: file_is_utils_vision_camera_proto_depIdxs,
		EnumInfos:         file_is_utils_vision_camera_proto_enumTypes,
		MessageInfos:      file_is_utils_vision_camera_proto_msgTypes,
	}.Build()
	File_is_utils_vision_camera_proto = out.File
	file_is_utils_vision_camera_proto_rawDesc = nil
	file_is_utils_vision_camera_proto_goTypes = nil
	file_is_utils_vision_camera_proto_depIdxs = nil
}
